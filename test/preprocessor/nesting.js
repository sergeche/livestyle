var assert = require('assert');
var nesting = require('../../lib/preprocessor/nesting');

describe('Nesting resolver', function() {
	it('should build correct replacement matrix', function() {
		assert.deepEqual(nesting.makeReplacementMatrix(4, 1), 
			[[0],
			 [1],
			 [2],
			 [3]]);
		assert.deepEqual(nesting.makeReplacementMatrix(2, 3), 
			[[0, 0, 0],
			 [0, 0, 1],
			 [0, 1, 0],
			 [0, 1, 1],
			 [1, 0, 0],
			 [1, 0, 1],
			 [1, 1, 0],
			 [1, 1, 1]
			 ]);

		assert.deepEqual(nesting.makeReplacementMatrix(4, 4), 
			[[0, 0, 0, 0],
			 [0, 0, 0, 1],
			 [0, 0, 0, 2],
			 [0, 0, 0, 3],
			 [0, 0, 1, 0],
			 [0, 0, 1, 1],
			 [0, 0, 1, 2],
			 [0, 0, 1, 3],
			 [0, 0, 2, 0],
			 [0, 0, 2, 1],
			 [0, 0, 2, 2],
			 [0, 0, 2, 3],
			 [0, 0, 3, 0],
			 [0, 0, 3, 1],
			 [0, 0, 3, 2],
			 [0, 0, 3, 3],
			 [0, 1, 0, 0],
			 [0, 1, 0, 1],
			 [0, 1, 0, 2],
			 [0, 1, 0, 3],
			 [0, 1, 1, 0],
			 [0, 1, 1, 1],
			 [0, 1, 1, 2],
			 [0, 1, 1, 3],
			 [0, 1, 2, 0],
			 [0, 1, 2, 1],
			 [0, 1, 2, 2],
			 [0, 1, 2, 3],
			 [0, 1, 3, 0],
			 [0, 1, 3, 1],
			 [0, 1, 3, 2],
			 [0, 1, 3, 3],
			 [0, 2, 0, 0],
			 [0, 2, 0, 1],
			 [0, 2, 0, 2],
			 [0, 2, 0, 3],
			 [0, 2, 1, 0],
			 [0, 2, 1, 1],
			 [0, 2, 1, 2],
			 [0, 2, 1, 3],
			 [0, 2, 2, 0],
			 [0, 2, 2, 1],
			 [0, 2, 2, 2],
			 [0, 2, 2, 3],
			 [0, 2, 3, 0],
			 [0, 2, 3, 1],
			 [0, 2, 3, 2],
			 [0, 2, 3, 3],
			 [0, 3, 0, 0],
			 [0, 3, 0, 1],
			 [0, 3, 0, 2],
			 [0, 3, 0, 3],
			 [0, 3, 1, 0],
			 [0, 3, 1, 1],
			 [0, 3, 1, 2],
			 [0, 3, 1, 3],
			 [0, 3, 2, 0],
			 [0, 3, 2, 1],
			 [0, 3, 2, 2],
			 [0, 3, 2, 3],
			 [0, 3, 3, 0],
			 [0, 3, 3, 1],
			 [0, 3, 3, 2],
			 [0, 3, 3, 3],

			 [1, 0, 0, 0],
			 [1, 0, 0, 1],
			 [1, 0, 0, 2],
			 [1, 0, 0, 3],
			 [1, 0, 1, 0],
			 [1, 0, 1, 1],
			 [1, 0, 1, 2],
			 [1, 0, 1, 3],
			 [1, 0, 2, 0],
			 [1, 0, 2, 1],
			 [1, 0, 2, 2],
			 [1, 0, 2, 3],
			 [1, 0, 3, 0],
			 [1, 0, 3, 1],
			 [1, 0, 3, 2],
			 [1, 0, 3, 3],
			 [1, 1, 0, 0],
			 [1, 1, 0, 1],
			 [1, 1, 0, 2],
			 [1, 1, 0, 3],
			 [1, 1, 1, 0],
			 [1, 1, 1, 1],
			 [1, 1, 1, 2],
			 [1, 1, 1, 3],
			 [1, 1, 2, 0],
			 [1, 1, 2, 1],
			 [1, 1, 2, 2],
			 [1, 1, 2, 3],
			 [1, 1, 3, 0],
			 [1, 1, 3, 1],
			 [1, 1, 3, 2],
			 [1, 1, 3, 3],
			 [1, 2, 0, 0],
			 [1, 2, 0, 1],
			 [1, 2, 0, 2],
			 [1, 2, 0, 3],
			 [1, 2, 1, 0],
			 [1, 2, 1, 1],
			 [1, 2, 1, 2],
			 [1, 2, 1, 3],
			 [1, 2, 2, 0],
			 [1, 2, 2, 1],
			 [1, 2, 2, 2],
			 [1, 2, 2, 3],
			 [1, 2, 3, 0],
			 [1, 2, 3, 1],
			 [1, 2, 3, 2],
			 [1, 2, 3, 3],
			 [1, 3, 0, 0],
			 [1, 3, 0, 1],
			 [1, 3, 0, 2],
			 [1, 3, 0, 3],
			 [1, 3, 1, 0],
			 [1, 3, 1, 1],
			 [1, 3, 1, 2],
			 [1, 3, 1, 3],
			 [1, 3, 2, 0],
			 [1, 3, 2, 1],
			 [1, 3, 2, 2],
			 [1, 3, 2, 3],
			 [1, 3, 3, 0],
			 [1, 3, 3, 1],
			 [1, 3, 3, 2],
			 [1, 3, 3, 3],

			 [2, 0, 0, 0],
			 [2, 0, 0, 1],
			 [2, 0, 0, 2],
			 [2, 0, 0, 3],
			 [2, 0, 1, 0],
			 [2, 0, 1, 1],
			 [2, 0, 1, 2],
			 [2, 0, 1, 3],
			 [2, 0, 2, 0],
			 [2, 0, 2, 1],
			 [2, 0, 2, 2],
			 [2, 0, 2, 3],
			 [2, 0, 3, 0],
			 [2, 0, 3, 1],
			 [2, 0, 3, 2],
			 [2, 0, 3, 3],
			 [2, 1, 0, 0],
			 [2, 1, 0, 1],
			 [2, 1, 0, 2],
			 [2, 1, 0, 3],
			 [2, 1, 1, 0],
			 [2, 1, 1, 1],
			 [2, 1, 1, 2],
			 [2, 1, 1, 3],
			 [2, 1, 2, 0],
			 [2, 1, 2, 1],
			 [2, 1, 2, 2],
			 [2, 1, 2, 3],
			 [2, 1, 3, 0],
			 [2, 1, 3, 1],
			 [2, 1, 3, 2],
			 [2, 1, 3, 3],
			 [2, 2, 0, 0],
			 [2, 2, 0, 1],
			 [2, 2, 0, 2],
			 [2, 2, 0, 3],
			 [2, 2, 1, 0],
			 [2, 2, 1, 1],
			 [2, 2, 1, 2],
			 [2, 2, 1, 3],
			 [2, 2, 2, 0],
			 [2, 2, 2, 1],
			 [2, 2, 2, 2],
			 [2, 2, 2, 3],
			 [2, 2, 3, 0],
			 [2, 2, 3, 1],
			 [2, 2, 3, 2],
			 [2, 2, 3, 3],
			 [2, 3, 0, 0],
			 [2, 3, 0, 1],
			 [2, 3, 0, 2],
			 [2, 3, 0, 3],
			 [2, 3, 1, 0],
			 [2, 3, 1, 1],
			 [2, 3, 1, 2],
			 [2, 3, 1, 3],
			 [2, 3, 2, 0],
			 [2, 3, 2, 1],
			 [2, 3, 2, 2],
			 [2, 3, 2, 3],
			 [2, 3, 3, 0],
			 [2, 3, 3, 1],
			 [2, 3, 3, 2],
			 [2, 3, 3, 3],

			 [3, 0, 0, 0],
			 [3, 0, 0, 1],
			 [3, 0, 0, 2],
			 [3, 0, 0, 3],
			 [3, 0, 1, 0],
			 [3, 0, 1, 1],
			 [3, 0, 1, 2],
			 [3, 0, 1, 3],
			 [3, 0, 2, 0],
			 [3, 0, 2, 1],
			 [3, 0, 2, 2],
			 [3, 0, 2, 3],
			 [3, 0, 3, 0],
			 [3, 0, 3, 1],
			 [3, 0, 3, 2],
			 [3, 0, 3, 3],
			 [3, 1, 0, 0],
			 [3, 1, 0, 1],
			 [3, 1, 0, 2],
			 [3, 1, 0, 3],
			 [3, 1, 1, 0],
			 [3, 1, 1, 1],
			 [3, 1, 1, 2],
			 [3, 1, 1, 3],
			 [3, 1, 2, 0],
			 [3, 1, 2, 1],
			 [3, 1, 2, 2],
			 [3, 1, 2, 3],
			 [3, 1, 3, 0],
			 [3, 1, 3, 1],
			 [3, 1, 3, 2],
			 [3, 1, 3, 3],
			 [3, 2, 0, 0],
			 [3, 2, 0, 1],
			 [3, 2, 0, 2],
			 [3, 2, 0, 3],
			 [3, 2, 1, 0],
			 [3, 2, 1, 1],
			 [3, 2, 1, 2],
			 [3, 2, 1, 3],
			 [3, 2, 2, 0],
			 [3, 2, 2, 1],
			 [3, 2, 2, 2],
			 [3, 2, 2, 3],
			 [3, 2, 3, 0],
			 [3, 2, 3, 1],
			 [3, 2, 3, 2],
			 [3, 2, 3, 3],
			 [3, 3, 0, 0],
			 [3, 3, 0, 1],
			 [3, 3, 0, 2],
			 [3, 3, 0, 3],
			 [3, 3, 1, 0],
			 [3, 3, 1, 1],
			 [3, 3, 1, 2],
			 [3, 3, 1, 3],
			 [3, 3, 2, 0],
			 [3, 3, 2, 1],
			 [3, 3, 2, 2],
			 [3, 3, 2, 3],
			 [3, 3, 3, 0],
			 [3, 3, 3, 1],
			 [3, 3, 3, 2],
			 [3, 3, 3, 3]
			 ]);
	});

	it('should replace &-references', function() {
		assert.deepEqual(nesting.replaceReferences('.d', ['.a', '.b']), null);
		assert.deepEqual(nesting.replaceReferences('&:hover', ['.a', '.b']), ['.a:hover', '.b:hover']);
		assert.deepEqual(nesting.replaceReferences('&&:hover', ['.a', '.b']), ['.a.a:hover', '.a.b:hover', '.b.a:hover', '.b.b:hover']);
	});
});